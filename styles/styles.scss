@import "./config.scss";
@import 'https://fonts.googleapis.com/css2?family=League+Spartan:wght@700&display=swap';



body{
    @extend %center;
    flex-direction: column;


    font-family: 'League Spartan', sans-serif;
    font-weight: 700;

    header{
        width: 100%;
        max-width: 327px;
        padding: 35px 30px;
        display: flex;
        justify-content: space-between;

        @each $size in $sizeList{
            h#{$size}{
                @if($size == 1){
                    font-size: 32px;
                }@else if($size == 2){
                    text-transform: uppercase;
                    font-size: 15px;
                    line-height: 11px;
                    letter-spacing: 1px;
                    text-align: center;
                }@else if($size == 3){
                    letter-spacing: 7px;
                    line-height: 11px;
                    margin-bottom: 5px;
                    font-size: 15px;
                    text-align: right;
                }
            }
        }

        .theme{
            @extend %center;
            gap: 31px;
        }
        
        .button-background{
            width: 71px;
            height: 26px;
            border-radius: 13px;
            @extend %center;
            justify-content: space-between;
            padding: 0 5px;
            box-sizing: border-box;
            cursor: pointer;
        }

        .button1,
        .button2,
        .button3{
            width: 16px;
            height: 16px;
            border-radius: 50%;
        }
    }

    main{
        padding: 0 24px;
        box-sizing: border-box;
        @extend %center;
        flex-direction: column;
        

        .output{
            max-width: 327px;
            width: 100%;
            border-radius: 10px;
            height: 88px;
            margin-bottom: 24px;
            justify-content: end;
            @extend %center;
            padding: 24px;
            box-sizing: border-box;

            h1{
                font-size: 40px;
                line-height: 37px;
                text-align: right;
                letter-spacing: -0.6px;
            }
        }

        .input{
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            padding: 24px;
            box-sizing: border-box;
            max-width: 327px;
            border-radius: 10px;
        

            button{
                width: 60px;
                height: 64px;
                border: none;
                border-radius: 5px;
                font-family: 'League Spartan', sans-serif;
                font-weight: 700;
                font-size: 32px;
                line-height: 29px;
                text-align: center;
                letter-spacing: -0.5px;
                cursor: pointer;
                margin-bottom: 13px;
                @extend %center;
            }

            #del{
                font-size: 20px;
                line-height: 18px;
            }

            #reset{
                width: 133px;
                height: 64px;
                font-size: 20px;
            }
            
            #equal{
                width: 133px;
                height: 64px;
                font-size: 20px;
            }
        }
    }
}

.theme-1{
    background-color: map-get($map: $theme1, $key: bodyColor);

    header{
        h1, h2, h3{
            color: map-get($map: $theme1, $key: textColor);
        }

        .button-background{
            background-color: map-get($map: $theme1, $key: switcherBackgroundColor);
        }

        @each $color in $colorList {
            .button#{$color}{
                @if($color == 1){
                    background-color: map-get($map: $theme1, $key: switcherButtonColor);
                }@else if($color == 2){
                    opacity: 1;
                }@else if($color == 3){
                    opacity: 1;
                }
            }
        }

    }
    main{
        .output{
            background-color: map-get($map: $theme1, $key: outputBackgroundColor);

            h1{
                color: map-get($map: $theme1, $key: outpuTextColor );
            }
        }

        .input{
            background-color: map-get($map: $theme1, $key: inputBackgroundColor);

            button{
                background-color: map-get($map: $theme1, $key: buttonColor);
                color: map-get($map: $theme1, $key: buttonTextColor);
            }

            #del,
            #reset{
                background-color: map-get($map: $theme1, $key: delAndResetButtonColor);
                color: map-get($map: $theme1, $key: delAndResetTextColor);
            }

            #equal{
                background-color: map-get($map: $theme1, $key: equalButtonColor);
                color: map-get($map: $theme1, $key: equalTextColor);
            }
        }
    }
}

.theme-2{
    background-color: map-get($map: $theme2, $key: bodyColor);

    header{
        h1, h2, h3{
            color: map-get($map: $theme2, $key: textColor);
        }

        .button-background{
            background-color: map-get($map: $theme2, $key: switcherBackgroundColor);
        }

        @each $color in $colorList {
            .button#{$color}{
                @if($color == 1){
                    opacity: 1;
                }@else if($color == 2){
                    background-color: map-get($map: $theme2, $key: switcherButtonColor);
                }@else if($color == 3){
                    opacity: 1;
                }
            }
        }
    }
    main{
        .output{
            background-color: map-get($map: $theme2, $key: outputBackgroundColor);

            h1{
                color: map-get($map: $theme2, $key: outpuTextColor );
            }
        }

        .input{
            background-color: map-get($map: $theme2, $key: inputBackgroundColor);

            button{
                background-color: map-get($map: $theme2, $key: buttonColor);
                color: map-get($map: $theme2, $key: buttonTextColor);
            }

            #del,
            #reset{
                background-color: map-get($map: $theme2, $key: delAndResetButtonColor);
                color: map-get($map: $theme2, $key: delAndResetTextColor);
            }

            #equal{
                background-color: map-get($map: $theme2, $key: equalButtonColor);
                color: map-get($map: $theme2, $key: equalTextColor);
            }
        }
    }
}

.theme-3{
    background-color: map-get($map: $theme3, $key: bodyColor);

    header{
        h1, h2, h3{
            color: map-get($map: $theme3, $key: textColor);
        }

        .button-background{
            background-color: map-get($map: $theme3, $key: switcherBackgroundColor);
        }

        @each $color in $colorList {
            .button#{$color}{
                @if($color == 1){
                    opacity: 1;
                }@else if($color == 2){
                    opacity: 1;
                }@else if($color == 3){
                    background-color: map-get($map: $theme3, $key: switcherButtonColor);
                }
            }
        }
    }

    main{
        .output{
            background-color: map-get($map: $theme3, $key: outputBackgroundColor);

            h1{
                color: map-get($map: $theme3, $key: outpuTextColor );
            }
        }

        .input{
            background-color: map-get($map: $theme3, $key: inputBackgroundColor);

            button{
                background-color: map-get($map: $theme3, $key: buttonColor);
                color: map-get($map: $theme3, $key: buttonTextColor);
            }

            #del,
            #reset{
                background-color: map-get($map: $theme3, $key: delAndResetButtonColor);
                color: map-get($map: $theme3, $key: delAndResetTextColor);
            }

            #equal{
                background-color: map-get($map: $theme3, $key: equalButtonColor);
                color: map-get($map: $theme3, $key: equalTextColor);
            }
        }
    }
}